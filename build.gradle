buildscript {
    ext.kotlin_version = '1.2.30'
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven { url "https://jitpack.io" }
    }
}

subprojects {
    applyPluginToSubProject(project)

    apply plugin: 'kotlin-android'
    apply plugin: 'kotlin-android-extensions'
    apply plugin: 'kotlin-kapt'

    android {
        compileSdkVersion 28
        defaultConfig {
            dataBinding.enabled = true
            minSdkVersion 21
            targetSdkVersion 26
            versionCode 1
            versionName "1.0"
            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }
        }

        buildTypes {
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            }
        }

        /**
         * 配置可以通过注解的方式给数据类序列化
         */
        androidExtensions {
            experimental = true
        }
    }

    dependencies {
        implementation fileTree(dir: 'libs', include: ['*.jar'])
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
        implementation 'com.android.support:appcompat-v7:28.0.0'
        implementation "com.android.support:design:28.0.0"
        implementation 'com.android.support.constraint:constraint-layout:1.1.3'
        testImplementation 'junit:junit:4.12'
        androidTestImplementation 'com.android.support.test:runner:1.0.2'
        androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    }
}

def applyPluginToSubProject(Project project) {
    if (project.name.equals("app")) {
        project.apply plugin: 'com.android.application'
        return
    }
    if (project.name.equals("module_live") && isLiveModule.toBoolean()) {
        project.apply plugin: 'com.android.application'
        return
    }
    if (project.name.equals("module_video") && isVideoMoudle.toBoolean()) {
        project.apply plugin: 'com.android.application'
        return
    }
    project.apply plugin: 'com.android.library'
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
